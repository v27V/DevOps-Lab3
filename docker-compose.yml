version: '3.8' # версия Docker compose

services:      # секция, где описываются сервисы, которые будут подняты
  my_go_app:   # секция сервиса веб-приложения
    build:     # секция в которой определяются параметры сборки образа
      context: ./my_go_app_v2      #откуда брать файлы для сборки
      dockerfile: Dockerfile       # имя Dockerfil'а
    container_name: my_go_app      # имя контейнера
    restart: always                # в каком случае контейнер будет перезапущен
    ports:                         # секция настройки портов
      - "8080:8080"                # настройки проброса портов, первое значение порт на хосте, второй - порт внутри контейнера
    depends_on:                    # секция, в которой указывается после каких действий нужно запускать контейнер
      postgres_db:                    # для сервиса с БД Postgres
        condition: service_healthy    # указывается условие, что контейнер с Postgres сначала должен пройти healthcheak
      mysql_db:                       # по аналогии с Postgres
        condition: service_healthy    # по аналогии с Postgres
      mongo_db:                       # по аналогии с Postgres
        condition: service_healthy    # по аналогии с Postgres
    networks:                         # секция с настройками сети
      - db_network                    # сети, в которых будет находиться контейнер
  nginx:                              # настройки сервиса nginx
    image: nginx:stable-alpine        # образ для сборки сервиса nginx
    container_name: nginx             # имя контейнера
    restart: always                   # в каком случае перезапукается контейнер
    ports:                            # настройки портов контейнера
      - "80:80"                       # настройки проброса портов, первое значение порт на хосте, второй - порт внутри контейнера
      - "443:443"                     # настройки проброса портов, первое значение порт на хосте, второй - порт внутри контейнера
    volumes:                          # секция настроек монтируемых директорий      
      - ./nginx/conf.d:/etc/nginx/conf.d:ro    #первое значение - директория на хосте, второе в контейнере, преотвращает потерю данных между перезапусками контейнера
      - ./nginx/certs:/etc/nginx/certs:ro      #первое значение - директория на хосте, второе в контейнере, преотвращает потерю данных между перезапусками контейнера
    depends_on:                       # секция, в которой указывается после каких действий нужно запускать контейнер
      - my_go_app                     # запускать после запуска сервиса my_go_app
    networks:                         # секция с настройками сети
      - db_network                    # сети, в которых будет находиться контейнер

  postgres_db:                            # имя сервиса
    image: postgres:16.0                  # образ для сборки сервиса
    container_name: postgres              # имя контейнера
    restart: always                       # в каких случаях перезапускать контейнер
    environment:                          # переменные окружения 
      POSTGRES_USER: user                 # пользователь Postgres
      POSTGRES_PASSWORD: P@ssw0rd         # пароль пользователя
      POSTGRES_DB: suppliers_db           # база данных, создаваемая внутри приложения
    ports:                                # настройки портов сервиса
      - "5432:5432"                       # настройки проброса портов, первое значение порт на хосте, второй - порт внутри контейнера
    volumes:                              # секция настроек монтируемых директорий 
      - postgres_data:/var/lib/postgresql/data    #первое значение - директория на хосте, второе в контейнере, преотвращает потерю данных между перезапусками контейнера
    networks:                             # секция с настройками сети
      - db_network                        # сети, в  которых будет находиться контейнер
    healthcheck:                          # секция, с настройками проверки доступность сервиса
      test: ["CMD-SHELL", "pg_isready -U user -d suppliers_db"] # выполнение команды, для проверки доступности сервиса
      interval: 5s                        # количество секунд между попытками проверить доуступность
      timeout: 5s                         # сколько секунд ждать ответа от сервиса
      retries: 5                          # количество попыток проверить доступность

  mysql_db:                               # секция с настройками сервиса
    image: mysql:8.0                      # образ для сборки сервиса
    container_name: mysql                 # имя контейнера
    restart: always                       # в каких случаях перезапускать контейнер
    environment:                          # переменные окружения сервиса
      MYSQL_ROOT_PASSWORD: P@ssw0rd       # пароль root 
      MYSQL_USER: user                    # имя пользователя
      MYSQL_PASSWORD: P@ssw0rd            # пароль пользователя
      MYSQL_DATABASE: inventory_db        # база данных
    ports:                                # настройки портов
      - "3306:3306"                         # настройки проброса портов, первое значение порт на хосте, второй - порт внутри контейнера
    volumes:                                # настройки монтируемых папок
      - mysql_data:/var/lib/mysql           #первое значение - директория на хосте, второе в контейнере, преотвращает потерю данных между перезапусками контейнера
    networks:                               # секция с настройками сети
      - db_network                          # сети, в которых будет находиться контейнер
    healthcheck:                          # секция проверки доступности сервиса
      test: ["CMD-SHELL", "mysqladmin ping -u user -pP@ssw0rd"]   # какую команду выполнить для проверки
      interval: 5s                        # количество секунд между проверками
      timeout: 5s                         # сколько секунд ждать ответа
      retries: 5                          # сколько попыток

  mongo_db:                                 # секция с настройками сервиса
    image: mongo:7.0                        # образ для сборки сервиса
    container_name: mongo                   # имя контейнера
    restart: always                         # в каких случаях перезапускать контейнер
    environment:
      MONGO_INITDB_ROOT_USERNAME: root          # имя пользователя
      MONGO_INITDB_ROOT_PASSWORD: qwerty123     # пароль пользователя
      MONGO_INITDB_DATABASE: products_db        # база данных в сервисе
    ports:
      - "27017:27017"                               # настройки проброса портов, первое значение порт на хосте, второй - порт внутри контейнера
    command: [--auth]                               # запустить Mongo с включенной аутентификацией
    volumes:                                         # секция с настройками монтирования директорий
      - mongo_data:/data/db                          #первое значение - директория на хосте, второе в контейнере, преотвращает потерю данных между перезапусками контейнера
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro        #скрипт создания пользователя при запуске Mongo для работы с БД products_db
    networks:                                       # секция с настройками сети
      - db_network                                  # сети, в которых будет находиться контейнер
    healthcheck:                                    # секция, с настройками проверки доступность сервиса
      test: ["CMD-SHELL", "mongosh --eval 'db.runCommand({ ping: 1 })'"]    # какую команду выполнить, в данном случае зайти в Mongo-Shell 
      interval: 5s                                  # количество секунд между проверками
      timeout: 5s                                   # сколько секунд ждать ответа
      retries: 5                                    # сколько попыток

volumes:
  postgres_data:
  mysql_data:                   # инициализация именовоных томов для БД, которые создаст сам Докер
  mongo_data:

networks:
  db_network:                   # инициализация изолированной виртуальной сети Докера, типа "мост"
    driver: bridge
